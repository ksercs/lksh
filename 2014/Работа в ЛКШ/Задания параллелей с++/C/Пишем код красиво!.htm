
<!-- saved from url=(0049)https://ejudge.lksh.ru/Ccpp/code_style_guide.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="content-language" content="ru-ru">
  <meta http-equiv="expires" content="0">
  <title>Пишем код красиво!</title>  
</head>
<body>
  <h1>Требования к хранению и написанию кода</h1>
  <ul>
    <li>Для каждой задачи следует создавать отдельную папку.</li><hr>
    <li>Открывающую фигурную скобку не следует переносить на новую строку. Перед ней должен быть пробел.</li> 
    <li>Если после блока <code>if</code> следует блок <code>else</code>, то <code>else</code> должно быть на той же строке, что и закрывающая скобка блока <code>if</code>.  <br>
		<code>
    <b>if</b> (<b>a</b> &gt;= 0) {<br>
    &nbsp;&nbsp;return a;<br>
    } <b>else</b> {<br>
    &nbsp;&nbsp;return -a;<br>
    }
    </code>      
    </li>
    <li>Каждый блок должен быть заключён в фигурные скобки, даже если он состоит из единственного оператора:<br>
    <code>
    <b>for</b> (<b>int</b> i = 0; i &lt; N; i++) {<br>
    &nbsp;&nbsp;value[i]++;<br>
    }
    </code>
    </li> 
    <li>Вложенные блоки следует выделять отступами:<br>
    <code>
    <b>if</b> (!was[to]) {<br>
    &nbsp;&nbsp;<b>if</b> (dist[to] &gt; dist[from] + w[from][to]) {<br>
    &nbsp;&nbsp;&nbsp;&nbsp;dist[to] = dist[from] + w[from][to];<br>
    &nbsp;&nbsp;}<br>
    }
    </code>
    </li>        
    <li>Размер отступа должен составлять <b>два</b> пробела.<br>
    <i>Важное примечание</i>: используйте один и тот же размер отступов внутри всего документа.</li>
    <li>Вокруг знаков арифметических операций ставятся пробелы:<br><code>a = b * 5;</code><br>
    <i>Примечание:</i> знаки унарных операций (например <code>b = -a</code>) пробелами не обособляются.</li>     
    <li>Вокруг знака присваивания и составного присваивания ставятся пробелы.<br><code>sum += value;</code></li>
    <li>Вокруг знаков логических операций (<code>&amp;&amp;, ||, ^, == , &gt;, &lt;= </code> и т.д.) ставятся пробелы.</li>
    <li>Функции разделяются пустыми строками. Логические блоки внутри функций (например, отдельные циклы, не вложенные друг в друга) разделяются пустыми строками.</li>
    <li>После запятой ставится пробел:<br>
    <code>
    <b>int</b> left, right;
    </code>
    </li>
    <li>Между именем функции и скобками пробел не ставится, с внутренней стороны скобок пробел не ставится: <code><b>void</b> search(<b>int</b> left, <b>int</b> right, <b>int</b> value)</code></li>
    <li>Каждый новый оператор должен находиться на отдельной строке.</li>
    <li>Переменные разных типов объявляются в разных строках.</li>
    <li>Переменным следует давать осмысленные названия. При этом желательно использовать английские слова (и их сокращения), а не транслитерированные русские 
    (<code><b>double</b> a123<b>, long long</b> summa, <b>int</b> kolvo</code> — плохие примеры; 
    <code><b>long long</b> sum, <b>int</b> cnt</code> (сокращение от <code>count</code>) — хорошие).</li>
    <li>Оператор <code>goto</code> использовать <b>запрещено!</b></li>
    <li>Внутри программы не должны встречаться числовые величины, содержащие больше одного знака в десятичной записи: используйте константы.</li>            
    <li>Для записи числовых констант, содержащих много знаков в десятичной записи, используйте экспоненциальную форму записи вещественного числа:</li>        
    <code>
    <b>const int</b> N = <b>int</b>(1e8); <i>// вместо 100000000<br></i>
    <b>const double</b> eps = 1e-6; <i>// вместо 0.000001</i><br>
    </code>
    
    <li>Нельзя давать переменным имена O, I, l (большая о, большая i, маленькая L).</li>
  </ul>
  <h1>Рекомендации</h1>
  <ul>
    <li>Для хранения вещественных чисел следует использовать типы <b>double</b> или <b>long double</b>: тип <b>float</b> всегда, когда объёма памяти достаточно, использовать не рекомендуется ввиду его низкой точности.</li>    
  </ul>
  <h2>Перечень требований и рекомендаций со временем может пополняться: заглядывайте в него почаще!</h2>


</body></html>